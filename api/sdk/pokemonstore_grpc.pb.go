// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/pokemonstore.proto

package sdk

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PokemonStoreClient is the client API for PokemonStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PokemonStoreClient interface {
	Buy(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type pokemonStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewPokemonStoreClient(cc grpc.ClientConnInterface) PokemonStoreClient {
	return &pokemonStoreClient{cc}
}

func (c *pokemonStoreClient) Buy(ctx context.Context, in *BuyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/pokemonstore.PokemonStore/Buy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PokemonStoreServer is the server API for PokemonStore service.
// All implementations must embed UnimplementedPokemonStoreServer
// for forward compatibility
type PokemonStoreServer interface {
	Buy(context.Context, *BuyRequest) (*empty.Empty, error)
	mustEmbedUnimplementedPokemonStoreServer()
}

// UnimplementedPokemonStoreServer must be embedded to have forward compatible implementations.
type UnimplementedPokemonStoreServer struct {
}

func (UnimplementedPokemonStoreServer) Buy(context.Context, *BuyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Buy not implemented")
}
func (UnimplementedPokemonStoreServer) mustEmbedUnimplementedPokemonStoreServer() {}

// UnsafePokemonStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PokemonStoreServer will
// result in compilation errors.
type UnsafePokemonStoreServer interface {
	mustEmbedUnimplementedPokemonStoreServer()
}

func RegisterPokemonStoreServer(s grpc.ServiceRegistrar, srv PokemonStoreServer) {
	s.RegisterService(&PokemonStore_ServiceDesc, srv)
}

func _PokemonStore_Buy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokemonStoreServer).Buy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pokemonstore.PokemonStore/Buy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokemonStoreServer).Buy(ctx, req.(*BuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PokemonStore_ServiceDesc is the grpc.ServiceDesc for PokemonStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PokemonStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pokemonstore.PokemonStore",
	HandlerType: (*PokemonStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Buy",
			Handler:    _PokemonStore_Buy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pokemonstore.proto",
}
